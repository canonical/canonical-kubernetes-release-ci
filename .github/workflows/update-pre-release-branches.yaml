name: Auto-update pre-release branches

on:
  pull_request:
    paths:
      - .github/workflows/update-pre-release-branches.yaml
  schedule:
    # Run 20 minutes after midnight, giving the k8s-snap nightly job
    # enough time to pick up new k8s releases and setup the git branches.
    - cron: "20 0 * * *"

permissions:
  contents: read

jobs:
  determine:
    name: "Determine k8s pre-releases"
    runs-on: ubuntu-latest
    outputs:
      gitBranches: ${{ steps.determine.outputs.gitBranches }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.BOT_SSH_KEY }}
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - run: pip install tox
      - name: Determine outstanding pre-releases
        id: determine
        run: |
          gitBranches=`tox -qq -e release -- get_outstanding_prereleases --as-git-branch`
          echo "gitBranches=$gitBranches" >> "$GITHUB_OUTPUT"
  handle-pre-releases:
    name: Handle pre-releases
    needs: [determine]
    if: ${{ needs.determine.outputs.preReleases != '' }}
    strategy:
      matrix:
        branch: ${{ fromJson('["' + join('","', split(needs.determine.outputs.gitBranches, '\n')) + '"]') }}
    uses: ./.github/workflows/create-release-branch.yaml
    secrets: inherit
    with:
      branches: ${{ matrix.branch }}
  clean-obsolete:
    runs-on: ubuntu-latest
    env:
      CHARMCRAFT_AUTH : ${{ secrets.CHARMCRAFT_AUTH }}
      LPCREDS_B64: ${{ secrets.LP_CREDS }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.BOT_SSH_KEY }}
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install Python dependencies
        shell: bash
        run: pip3 install -r ./scripts/requirements.txt
      - name: Clean obsolete branches
        run: |
          python3 ./scripts/k8s_release.py remove_obsolete_prereleases
